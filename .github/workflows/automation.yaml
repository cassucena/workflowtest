name: Azure Automation Deployment
on:
  push:
    branches:
      - main  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
          git diff --name-only ${{ github.event.before }} ${{ github.sha }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # principal json information in Action Secrets
        
    - name: List changed files and Deploy in Automation Account
      run: |
        az upgrade --yes
        
        # Get the list of changed files
        changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        echo "$changed_files"
        # Filter only Ps1 files
        ps1_files=$(echo "$changed_files" | grep '\.ps1$' || true)
        #py_files=$(echo "$changed_files" | grep '\.py$' || true)
 
        # Print the changed files (for demonstration purposes)
        echo "Changed Ps1 files: $ps1_files"
        #echo "Changed py files: $py_files"

        
        for file in $ps1_files; do
          runbook_name=$(basename "$file" .ps1)
      
          # Check if the runbook already exists
          if ! az automation runbook show --resource-group "teste" --automation-account "workflow" --name "$runbook_name" &>/dev/null; then
              # Runbook doesn't exist, create it
              az automation runbook create --resource-group "teste" --automation-account "workflow" --name "$runbook_name" --type Powershell 
          fi
          
          # Replace the content of the runbook with the content from the local Python script
          az automation runbook replace-content --automation-account "workflow" --resource-group "teste" --name "$runbook_name" --content "@$file"
          
          # Publish the runbook
          az automation runbook publish --automation-account "workflow" --resource-group "teste" --name "$runbook_name"
        done

        # for file in $py_files; do
        # runbook_name=$(basename "$file" .py)
    
        # # Check if the runbook already exists
        # if ! az automation runbook show --resource-group "teste" --automation-account "workflow" --name "$runbook_name" &>/dev/null; then
        #     # Runbook doesn't exist, create it
        #     az automation runbook create --resource-group "teste" --automation-account "workflow" --name "$runbook_name" --type Python3 
        # fi
        
        # # Replace the content of the runbook with the content from the local Python script
        # az automation runbook replace-content --automation-account "workflow" --resource-group "teste" --name "$runbook_name" --content "@$file"
        
        # # Publish the runbook
        # az automation runbook publish --automation-account "workflow" --resource-group "teste" --name "$runbook_name"
        # done
        

    # - name: Deploy to Azure Automation
    #   run: |
    #     for file in ./scripts/*.py; do
    #       runbook_name=$(basename "$file" .py)
      
    #       # Check if the runbook already exists
    #       if ! az automation runbook show --resource-group "teste" --automation-account "workflow" --name "$runbook_name" &>/dev/null; then
    #           # Runbook doesn't exist, create it
    #           az automation runbook create --resource-group "teste" --automation-account "workflow" --name "$runbook_name" --type Python3 
    #       fi
          
    #       # Replace the content of the runbook with the content from the local Python script
    #       az automation runbook replace-content --automation-account "workflow" --resource-group "teste" --name "$runbook_name" --content "@$file"
          
    #       # Publish the runbook
    #       az automation runbook publish --automation-account "workflow" --resource-group "teste" --name "$runbook_name"
    #     done

    #     for file in ./scripts/*.ps1; do
    #       runbook_name=$(basename "$file" .ps1)
      
    #       # Check if the runbook already exists
    #       if ! az automation runbook show --resource-group "teste" --automation-account "workflow" --name "$runbook_name" &>/dev/null; then
    #           # Runbook doesn't exist, create it
    #           az automation runbook create --resource-group "teste" --automation-account "workflow" --name "$runbook_name" --type Powershell 
    #       fi
          
    #       # Replace the content of the runbook with the content from the local Python script
    #       az automation runbook replace-content --automation-account "workflow" --resource-group "teste" --name "$runbook_name" --content "@$file"
          
    #       # Publish the runbook
    #       az automation runbook publish --automation-account "workflow" --resource-group "teste" --name "$runbook_name"
    #     done

        # for file in ./scripts/*; do
        #   runbook_name=$(basename "$file" .ps1)
        #   az automation runbook create --resource-group "teste" --automation-account "workflow" --name "$runbook_name" --type Powershell 
        #   az automation runbook replace-content --automation-account-name "workflow" --resource-group "teste" --name "$runbook_name" --content "@$file"
        #   az automation runbook publish --automation-account-name "workflow" --resource-group "teste" --name "$runbook_name"
        # done
